### Fig. 5b, 6b, and 7b ###
# The code used to make Figures 5b, 6b, and 7b are very similar with only minor differences (such as file names, pathway groups, colors, and breaks). Hence, with only minor adjustments the following code can be used to make all three Figures. 

# Load required packages
library(readxl)
library(dplyr)
library(parallel)
library(writexl)
library(readr)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(tidyr)
library(pheatmap)

# Set the working directory
setwd(".../path")

# Load data
NAD <- read_xlsx("file_name")
NAD_df <- data.frame(NAD) 

protein <- read_xlsx("file_name")
protein_df <- data.frame(protein)

mrnas <- read_xlsx("file_name")
mrnas_df <- data.frame(mrnas)

# Prepare data frames
NAD_df <- NAD_df[, 3:ncol(NAD_df)]
protein_df <- protein_df[, 3:ncol(protein_df)]
mrnas_df <- mrnas_df[, 3:ncol(mrnas_df)]

prot_mrna_df <- cbind(mrnas_df, protein_df)
prot_mrna_df <- data.frame(prot_mrna_df)

NAD_df <- data.frame(NAD_df)

prot_mrna_df[] <- lapply(prot_mrna_df, function(x) as.numeric(as.character(x)))
#sum(is.na(prot_mrna_df))

# Setup parallel environment
no_cores <- detectCores() - 2
cl <- makeCluster(no_cores)
clusterExport(cl, varlist = c("NAD_df", "prot_mrna_df", "cor.test"))
clusterEvalQ(cl, library(stats))

# Prepare pairs of metabolite and Protein_mRNA for parallel computation
params <- expand.grid(metabolite = colnames(NAD_df), Protein_mRNA = colnames(prot_mrna_df))

# Function to calculate correlation for a pair
calc_cor <- function(param) {
  metabolite <- param$metabolite
  Protein_mRNA <- param$Protein_mRNA
  
  if (any(is.na(NAD_df[[metabolite]])) || any(is.na(prot_mrna_df[[Protein_mRNA]]))) {
    return(NULL)
  } else {
    test_result <- cor.test(NAD_df[[metabolite]], prot_mrna_df[[Protein_mRNA]], method = "spearman")
    return(data.frame(Metabolite = metabolite, 
                      Protein_mRNAs = Protein_mRNA, 
                      Correlation = test_result$estimate, 
                      P_Value = test_result$p.value))
  }
}

# Run calculations in parallel
results <- parLapply(cl, split(params, seq(nrow(params))), calc_cor)

# Stop the parallel cluster
stopCluster(cl)

# Combine the results
results_2 <- do.call(rbind, results)

# Remove 'NULL' entries
results_2 <- results_2[!sapply(results_2, is.null), ]

results_2$P_Adjust <- p.adjust(results_2$P_Value, method = "BH")

results_2$Significant <- results_2$P_Adjust < 0.05

significant_results <- results_2[results_2$Significant == TRUE, ]

significant_results <- data.frame(significant_results)

write_xlsx(significant_results, "significant_results_2_PMI.xlsx")
significant_results <- read_xlsx("significant_results_2.xlsx")
significant_results <- data.frame(significant_results)

# Divide the signififcant results in positive and negative correlations
significant_results$Positive <- significant_results$Correlation > 0
significant_results_pos <- significant_results[significant_results$Positive == TRUE, ]
significant_results_neg <- significant_results[significant_results$Positive == FALSE, ]

## Start KEGG
# The following code should be ran for the positive and negative correlations seperately
data <- significant_results_pos #or significant_results_neg

# Initialize empty data frames for KEGG results
KEGG_df <- data.frame()
# Get the list of unique metabolites
unique_metabolites <- unique(data$Metabolite)

# Perform KEGG analysis for each unique metabolite
for (metabolite in unique_metabolites) {
  # Extract all related Protein_mRNA names for this metabolite
  Protein_mRNAs <- data$Protein_mRNAs[data$Metabolite == metabolite]
  
  # Convert Protein_mRNA names to Entrez IDs
  entrez_ids <- bitr(Protein_mRNAs, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
  valid_entrez_ids <- entrez_ids$ENTREZID[!is.na(entrez_ids$ENTREZID)]
  
  if (length(valid_entrez_ids) == 0) {
    next
  }
  
  # KEGG analysis
  kegg_results <- enrichKEGG(gene = valid_entrez_ids,
                             organism = "hsa",
                             keyType = "kegg",
                             pAdjustMethod = "BH",
                             qvalueCutoff = 0.05)
  
  # Convert to data frame
  if (!is.null(kegg_results) && nrow(kegg_results) > 0) {
    kegg_df <- as.data.frame(kegg_results)
    kegg_df$Metabolite <- metabolite  # Add the metabolite name
    KEGG_df <- rbind(KEGG_df, kegg_df)
  }
   
  # Print message indicating completion
  print(paste("Completed analysis for", metabolite))
}

KEGG_df <- KEGG_df %>%
  arrange(p.adjust)

### End KEGG

setwd(".../path")
write_xlsx(KEGG_df, "file_name")

# Data preparation for heatmap
setwd(".../path")
KEGG <- read_xlsx("file_name")
KEGG_df <- data.frame(KEGG)
KEGG_df$NegLog_P_adjust <- -log10(KEGG_df$p.adjust)
unique_pathways <- unique(KEGG_df$Name)
unique_metabolites <- unique(KEGG_df$Metabolite)

# Initialize Overview_df with 0's
Overview_df <- expand.grid(Metabolite = unique_metabolites, Pathway = unique_pathways)
Overview_df$NegLog_P_adjust <- 0
Overview_df_wide <- Overview_df %>%
  pivot_wider(names_from = Pathway, values_from = NegLog_P_adjust, values_fill = list(NegLog_P_adjust = 0))

for (row in 1:nrow(KEGG_df)) {
  metabolite <- KEGG_df$Metabolite[row]
  pathway <- KEGG_df$Name[row]
  neg_log_p_adjust <- KEGG_df$NegLog_P_adjust[row]
  
  Overview_df_wide[Overview_df_wide$Metabolite == metabolite, pathway] <- neg_log_p_adjust
}

# Creating the new dataframe with unique descriptions
meta_data_df <- KEGG_df %>%
  distinct(Name, .keep_all = TRUE)

# Save file
#write_xlsx(meta_data_df, "file_name")

heatmap_data_df <- data.frame(Overview_df_wide)
rownames_phmat <- heatmap_data_df$Metabolite

phmat <- heatmap_data_df[2:ncol(heatmap_data_df)]
rownames(phmat) <- rownames_phmat
colnames_phmat <- read_xlsx("file_name")
colnames_phmat <- data.frame(colnames_phmat)
colnames(phmat) <- colnames_phmat

phmat_trans <- t(phmat)
phmat_trans <- data.frame(phmat_trans)
colnames(phmat_trans) <- "NAD+"

# Create annot_col
annot_col <- data.frame(meta_data_df$Group)
colnames(annot_col)[1] <- "Pathway group"
rownames(annot_col) <- meta_data_df$Name

## START HEATMAP
setwd(".../path")
pdf("file_name", width=6.2, height = 10, bg = "white")

# Heatmap
# Some details of the settings (such as pathway groups, colors, and breaks) can be slightly different depending on the figure (Fig. 5b, 6b, and 7b). 
# Here, we show the settings of Fig. 5b
ph <- phmat_trans %>% as.data.frame() %>% 
  pheatmap(cluster_rows = F, cluster_cols = F, clustering_method = "ward.D2",
           cutree_rows = 3, cutree_cols = 4,
           annotation_row = annot_col,
           annotation_colors = list(
             'Pathway group'=c(
               "Metabolism" = "lemonchiffon",
               "Replication and repair" = "wheat3",
               "Signal transduction" = "sienna2",
               "Endocrine system" = "mediumorchid",
               "Excretory system" = "goldenrod1"
               )),
           breaks = c(0,1.301,2,4,6,8,10),
           color = c("white", "#CCCCCC", "#B2B2B2", "#999999", "#7F7F7F", "#5F5F5F"))

dev.off()
