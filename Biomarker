library(readxl)
library(dplyr)
library(writexl)

setwd("...")

HMP <- read_xlsx("bootstrap_auc_results_hmp.xlsx")
NMP <- read_xlsx("bootstrap_auc_results.xlsx")

HMP_df <- data.frame(HMP)
NMP_df <- data.frame(NMP)

HMP_top_100 <- HMP_df[1:100,]
NMP_top_100 <- NMP_df[1:100,]


# Step 1: Arrange HMP_df by AUC in descending order
HMP_df <- HMP_df %>%
  arrange(desc(Mean_AUC)) %>%
  mutate(Rank_Number = dense_rank(desc(Mean_AUC)))

# Step 3: For each metabolite in NMP_top_100, find its rank from HMP_df
NMP_top_100$HMP.Rank.new <- sapply(NMP_top_100$Metabolite, function(metabolite) {
  rank <- HMP_df$Rank_Number[HMP_df$Metabolite == metabolite]
  
  # If metabolite not found, return NA or a suitable indicator
  if(length(rank) == 0) return(NA)
  
  return(rank)
})


# For each metabolite in NMP_top_100, find its AUC from HMP_df
NMP_top_100$HMP.AUC <- sapply(NMP_top_100$Metabolite, function(metabolite) {
  # Retrieve the AUC value for the metabolite
  auc_value <- HMP_df$Mean_AUC[HMP_df$Metabolite == metabolite]
  
  # If the metabolite is not found, return NA
  if(length(auc_value) == 0) return(NA)
  
  return(auc_value)
})

# Step 1: Arrange NMP_df by AUC in descending order
NMP_df <- NMP_df %>%
  arrange(desc(Mean_AUC)) %>%
  mutate(Rank_Number = dense_rank(desc(Mean_AUC)))

# Step 2: For each metabolite in HMP_top_100, find its rank from NMP_df
HMP_top_100$NMP.Rank <- sapply(HMP_top_100$Metabolite, function(metabolite) {
  rank <- NMP_df$Rank_Number[NMP_df$Metabolite == metabolite]
  
  # If metabolite not found, return NA or a suitable indicator
  if(length(rank) == 0) return(NA)
  
  return(rank)
})

# For each metabolite in HMP_top_100, find its AUC from HMP_df
HMP_top_100$NMP.AUC <- sapply(HMP_top_100$Metabolite, function(metabolite) {
  # Retrieve the AUC value for the metabolite
  auc_value <- NMP_df$Mean_AUC[NMP_df$Metabolite == metabolite]
  
  # If the metabolite is not found, return NA
  if(length(auc_value) == 0) return(NA)
  
  return(auc_value)
})

